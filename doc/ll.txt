<prog> -> <body> <eols> EOF
<body> -> <definitions> <scope> <shared_variables_declarations>
<scope> -> SCOPE EOL <eols> <body_statements> END SCOPE

<definitions> -> <eols> <definition> <definitions>
<definitions> -> <eols> E

<definition> -> <function_declaration>
<definition> -> <function_definition>
<definition> -> <shared_variable_declaration>

<function_definition> -> <function_header> EOL <eols> <statements> END FUNCTION
<function_declaration> -> DECLARE <function_header> EOL <eols>

<function_header> -> FUNCTION IDENTIFIER (<function_params>) AS <type>

<function_params> -> E
<function_params> -> <function_param> <function_n_param>

<function_n_param> -> E
<function_n_param> -> <function_param> <function_n_param>

<function_param> -> IDENTIFIER AS TYPE

<body_statements> -> E
<body_statements> -> <body_statement_single> EOL <eols> <body_statements>

<function_statements> -> E
<function_statements> -> <function_statement_single> EOL <eols> <function_statements>

<cycle_statements> -> E
<cycle_statements> -> <cycle_statement_single> EOL <eols> <cycle_statements>

<function_statement_single> -> <identifier_assignment>
<function_statement_single> -> <input>
<function_statement_single> -> <return>
<function_statement_single> -> <print>
<function_statement_single> -> <condition>
<function_statement_single> -> <while_>
<function_statement_single> -> <variable_declaration>
<function_statement_single> -> <static_variable_declaration>
<function_statement_single> -> <for>

<body_statement_single> -> <input>
<body_statement_single> -> <identifier_assignment>
<body_statement_single> -> <while_>
<body_statement_single> -> <print>
<body_statement_single> -> <scope>
<body_statement_single> -> <condition>
<body_statement_single> -> <variable_declaration>
<function_statement_single> -> <for>

<cycle_statement_single> -> <identifier_assignment>
<cycle_statement_single> -> <input>
<cycle_statement_single> -> <for>
<cycle_statement_single> -> <return>
<cycle_statement_single> -> <print>
<cycle_statement_single> -> <condition>
<cycle_statement_single> -> <while_>
<cycle_statement_single> -> <variable_declaration>
<cycle_statement_single> -> <continue>
<cycle_statement_single> -> <exit>

<variable_declaration> -> DIM IDENTIFIER AS <type> <declaration_assignment>
<declaration_assignment> -> E
<declaration_assignment> -> <assignment>
<type> -> INTEGER
<type> -> BOOLEAN
<type> -> STRING
<type> -> DOUBLE

<identifier_assignment> -> IDENTIF <assignment>

<assignment> -> = <expression>
<assignment> -> <modify_assignment>

<shared_variables_declarations> -> E
<shared_variables_declarations> -> <shared_variable_declaration>
<shared_variable_declaration> -> DIM SHARED IDENTIFIER AS <type> <declaration_assignment>

<static_variable_declaration> -> STATIC IDENTIFIER AS <type> <declaration_assignment>

<return> -> RETURN <expr>

<assignment> -> <modify> <expression>
<modify> -> +=
<modify> -> -=
<modify> -> *=
<modify> -> /=
<modify> -> \=

<print> -> PRINT <print_expression> <print_expressions>
<print_expressions> -> E
<print_expressions> -> <print_expression> <print_expressions>
<print_expression> -> <expression> SEMICOLON

<while_> -> DO WHILE <expression> EOL <eols> <cycle_statements> LOOP

<input> -> INPUT IDENTIFIER

<condition> -> IF <expr> THEN EOL <eols> <statements>
			   <condition_elseif> <condition_else> END IF
<condition_elseif> -> E
<condition_elseif> -> ELSEIF <expr> THEN EOL <statements> <condition_elseif>

<condition_else> -> E
<condition_else> -> ELSE EOL <eols> <statements>

<for> -> FOR IDENTIFIER <assignment> <step> EOL <eols> <cycle_statements> NEXT

<eols> -> E
<eols> -> EOL <eols>